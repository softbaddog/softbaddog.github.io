(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{631:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"doubly-linked-list"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#doubly-linked-list","aria-hidden":"true"}},[t._v("#")]),t._v(" Doubly-Linked List")]),t._v(" "),a("p"),a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#overview"}},[t._v("Overview")]),a("ul",[a("li",[a("a",{attrs:{href:"#basic-concept"}},[t._v("Basic Concept")])])])]),a("li",[a("a",{attrs:{href:"#development-guidelines"}},[t._v("Development Guidelines")]),a("ul",[a("li",[a("a",{attrs:{href:"#functions"}},[t._v("Functions")])]),a("li",[a("a",{attrs:{href:"#development-process"}},[t._v("Development Process")])])])]),a("li",[a("a",{attrs:{href:"#precautions"}},[t._v("Precautions")])]),a("li",[a("a",{attrs:{href:"#programming-example"}},[t._v("Programming Example")]),a("ul",[a("li",[a("a",{attrs:{href:"#example-description"}},[t._v("Example Description")])]),a("li",[a("a",{attrs:{href:"#example-code"}},[t._v("Example Code")])]),a("li",[a("a",{attrs:{href:"#verification"}},[t._v("Verification")])])])])])]),a("p"),t._v(" "),a("h2",{attrs:{id:"overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#overview","aria-hidden":"true"}},[t._v("#")]),t._v(" Overview")]),t._v(" "),a("h3",{attrs:{id:"basic-concept"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#basic-concept","aria-hidden":"true"}},[t._v("#")]),t._v(" Basic Concept")]),t._v(" "),a("p",[t._v("A doubly linked list is a linked data structure that consists of a set of sequentially linked records called nodes. Each node in a doubly linked list contains two pointers that reference to the previous and to the next node in the sequence of nodes. The head of the doubly linked list is deterministic and immediately accessible.")]),t._v(" "),a("p",[t._v("Any node of a doubly linked list, once obtained, can be used to begin a new traversal of the list in either direction (towards the beginning or end) from the given node. This allows a lot of data to be quickly traversed. Because of the symmetric nature of a doubly linked list, nodes can easily be inserted into or removed from the list.")]),t._v(" "),a("h2",{attrs:{id:"development-guidelines"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#development-guidelines","aria-hidden":"true"}},[t._v("#")]),t._v(" Development Guidelines")]),t._v(" "),a("h3",{attrs:{id:"functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#functions","aria-hidden":"true"}},[t._v("#")]),t._v(" Functions")]),t._v(" "),a("p",[t._v("The doubly linked list module provides the following functions:")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("Function Category")]),t._v(" "),a("th",[t._v("API")]),t._v(" "),a("th",[t._v("Description")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("List initialization")]),t._v(" "),a("td",[a("code",[t._v("LOS_InitList")])]),t._v(" "),a("td",[t._v("Initializes a doubly linked list")])]),t._v(" "),a("tr",[a("td",[t._v("Node insertion")]),t._v(" "),a("td",[a("code",[t._v("LOS_ListAdd")])]),t._v(" "),a("td",[t._v("Inserts a node to a doubly linked list")])]),t._v(" "),a("tr",[a("td"),t._v(" "),a("td",[a("code",[t._v("LOS_ListTailInsert")])]),t._v(" "),a("td",[t._v("Inserts a node to the tail of a doubly linked list")])]),t._v(" "),a("tr",[a("td",[t._v("Node deletion")]),t._v(" "),a("td",[a("code",[t._v("LOS_ListDelete")])]),t._v(" "),a("td",[t._v("Deletes a node from a doubly linked list")])]),t._v(" "),a("tr",[a("td",[t._v("List status determination")]),t._v(" "),a("td",[a("code",[t._v("LOS_ListEmpty")])]),t._v(" "),a("td",[t._v("Determines whether a doubly linked list is empty")])]),t._v(" "),a("tr",[a("td",[t._v("Node deletion and list initialization")]),t._v(" "),a("td",[a("code",[t._v("LOS_ListDelInit")])]),t._v(" "),a("td",[t._v("Deletes a node from a doubly linked list Uses the node to initialize a doubly linked list")])])])]),t._v(" "),a("h3",{attrs:{id:"development-process"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#development-process","aria-hidden":"true"}},[t._v("#")]),t._v(" Development Process")]),t._v(" "),a("p",[t._v("Doubly linked list development process:")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Call the "),a("code",[t._v("LOS_InitList")]),t._v(" API to initialize a doubly linked list.")])]),t._v(" "),a("li",[a("p",[t._v("Call the "),a("code",[t._v("LOS_ListAdd")]),t._v(" API to insert a node into the list.")])]),t._v(" "),a("li",[a("p",[t._v("Call the "),a("code",[t._v("LOS_ListTailInsert")]),t._v(" API to insert a node into the tail of the list.")])]),t._v(" "),a("li",[a("p",[t._v("Call the "),a("code",[t._v("LOS_ListDelete")]),t._v(" API to delete a node from the list.")])]),t._v(" "),a("li",[a("p",[t._v("Call the "),a("code",[t._v("LOS_ListEmpty")]),t._v(" API to determine whether the doubly linked list is empty.")])]),t._v(" "),a("li",[a("p",[t._v("Call the "),a("code",[t._v("LOS_ListDelInit")]),t._v(" API to delete a node and use the node to initialize the doubly linked list.")])])]),t._v(" "),a("h2",{attrs:{id:"precautions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#precautions","aria-hidden":"true"}},[t._v("#")]),t._v(" Precautions")]),t._v(" "),a("ul",[a("li",[t._v("Need to pay attention to the operation of the node pointer in the front and back direction.")])]),t._v(" "),a("h2",{attrs:{id:"programming-example"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#programming-example","aria-hidden":"true"}},[t._v("#")]),t._v(" Programming Example")]),t._v(" "),a("h3",{attrs:{id:"example-description"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-description","aria-hidden":"true"}},[t._v("#")]),t._v(" Example Description")]),t._v(" "),a("p",[t._v("Before using a doubly linked list, ensure that sufficient memory space is available to store the list. After deleting a node from the list, do not forget to free up the memory occupied by the node.")]),t._v(" "),a("p",[t._v("In the programming example, the following steps will be performed:")]),t._v(" "),a("ol",[a("li",[a("p",[t._v("Initialize a doubly linked list.")])]),t._v(" "),a("li",[a("p",[t._v("Insert a node into the list.")])]),t._v(" "),a("li",[a("p",[t._v("Delete a node from the list.")])]),t._v(" "),a("li",[a("p",[t._v("Check whether the insertion and deletion was successful.")])])]),t._v(" "),a("h3",{attrs:{id:"example-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#example-code","aria-hidden":"true"}},[t._v("#")]),t._v(" Example Code")]),t._v(" "),a("p",[t._v("The code is as follows:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{attrs:{class:"token macro property"}},[t._v("#"),a("span",{attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"stdio.h"')])]),t._v("\n"),a("span",{attrs:{class:"token macro property"}},[t._v("#"),a("span",{attrs:{class:"token directive keyword"}},[t._v("include")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v('"los_list.h"')])]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("static")]),t._v(" UINT32 "),a("span",{attrs:{class:"token function"}},[t._v("DLlist_sample")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("VOID"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    LOS_DL_LIST DLlist "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LOS_DL_LIST DLlistNode01 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LOS_DL_LIST DLlistNode02 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    LOS_DL_LIST DLlistNode03 "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token constant"}},[t._v("NULL")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token function"}},[t._v("printf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Initial head.\\r\\n"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("LOS_ListInit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlist"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token function"}},[t._v("LOS_ListAdd")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlistNode01"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DLlistNode01"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pstNext "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlist "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" DLlistNode01"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pstPrev "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlist"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("printf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Add DLlistNode01 success.\\r\\n"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token function"}},[t._v("LOS_ListTailInsert")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlist"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlistNode02"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DLlistNode02"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pstNext "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlist "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" DLlistNode02"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pstPrev "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlistNode01"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("printf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Tail insert DLlistNode02 success.\\r\\n"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token function"}},[t._v("LOS_ListHeadInsert")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlistNode02"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlistNode03"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("DLlistNode03"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pstNext "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlist "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" DLlistNode03"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pstPrev "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlistNode02"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("printf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Head insert DLlistNode03 success.\\r\\n"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token function"}},[t._v("LOS_ListDelInit")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlistNode03"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("LOS_ListDelete")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlistNode01"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("LOS_ListDelete")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlistNode02"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("LOS_ListEmpty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("&")]),t._v("DLlist"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("printf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v('"Delete success.\\r\\n"')]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" LOS_OK"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),a("h3",{attrs:{id:"verification"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#verification","aria-hidden":"true"}},[t._v("#")]),t._v(" Verification")]),t._v(" "),a("p",[t._v("The verification result is as follows:")]),t._v(" "),a("div",{staticClass:"language-c extra-class"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[t._v("Initial head \nAdd DLlistNode01 success \nTail insert DLlistNode02 success \nHead insert DLlistNode03 success \nDelete success  \n")])])])])}],!1,null,null,null);e.options.__file="list.md";s.default=e.exports}}]);